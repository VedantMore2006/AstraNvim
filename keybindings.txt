General Mappings
Normal Mode (n):
<Leader>s: Save file (:w<CR>) - Config A, updated in Config A
<Leader>wq: Save and quit (:wq<CR>) - Config C, added to Config A
<Esc>: Clear highlights (:noh<CR>) - Config A
<C-h>: Window left (<C-w>h) - Config A
<C-l>: Window right (<C-w>l) - Config A
<C-j>: Window down (<C-w>j) - Config A
<C-k>: Window up (<C-w>k) - Config A
<C-Up>: Increase window height (:resize +2<CR>) - Config A
<C-Down>: Decrease window height (:resize -2<CR>) - Config A
<C-Left>: Decrease window width (:vertical resize -2<CR>) - Config A
<C-Right>: Increase window width (:vertical resize +2<CR>) - Config A
<Leader>bd: Delete buffer (:bdelete<CR>) - Config A
<Leader>ba: Close all buffers except current (:%bd|e#<CR>) - Config A
<Leader>n: Toggle line number (:set nu!<CR>) - Config A
<Leader>rn: Toggle relative number (:set rnu!<CR>) - Config A
<Leader>b: New buffer (:enew<CR>) - Config A
<Leader>ch: Mapping cheatsheet (:NvCheatsheet<CR>) - Config A
<Leader>fm: LSP formatting (vim.lsp.buf.format { async = true }) - Config A
<Leader>zf: Fold all (zM) - Config A
<Leader>zo: Unfold all (zR) - Config A
<Leader>zt: Toggle fold (za) - Config A
<Leader>rr: Repeat last substitution (:&&<CR>) - Config A
<Leader>df: Delete inside function (dif) - Config A
<Leader>cf: Change inside function (cif) - Config A
<Leader>qm: Start/stop macro recording (q) - Config A
<Leader>@: Replay last macro (@@) - Config A
<Leader>rp: Run Python file (:TermExec cmd='python3 %'<CR>) - Config A
<Leader>z: Toggle Zen Mode (:ZenMode<CR>) - Config B, added to Config A
<Leader>ss: Save session (require("persistence").save()) - Config B, added to Config A
<Leader>sl: Load session (require("persistence").load()) - Config B, added to Config A
<C-s>: Save file (:w) - Config B
<Leader>W: Save all (:wa) - Config B
<Leader>Q: Quit all (:qa) - Config B
Insert Mode (i):
<C-b>: Beginning of line (<ESC>^i) - Config A
<C-e>: End of line (<End>) - Config A
<C-h>: Move left (<Left>) - Config A
<C-l>: Move right (<Right>) - Config A
<C-j>: Move down (<Down>) - Config A
<C-k>: Move up (<Up>) - Config A
jk: Exit insert mode (<Esc>) - Config C, added to Config A
Terminal Mode (t):
<C-x>: Escape terminal mode (<C-\\><C-N>) - Config A
Visual Mode (v):
<Up>: Move up (v:count || mode(1)[0:1] == "no" ? "k" : "gk") - Config A
<Down>: Move down (v:count || mode(1)[0:1] == "no" ? "j" : "gj") - Config A
<: Indent line (<gv) - Config A
>: Indent line (>gv) - Config A
Visual (Exclusive) Mode (x):
j: Move down (v:count || mode(1)[0:1] == "no" ? "j" : "gj") - Config A
k: Move up (v:count || mode(1)[0:1] == "no" ? "k" : "gk") - Config A
p: Paste without copying replaced text (p:let @+=@0<CR>:let @"=@0<CR>) - Config A
Tabufline Mappings
Normal Mode (n):
<Tab>: Goto next buffer (require("nvchad.tabufline").tabuflineNext()) - Config A
<S-Tab>: Goto prev buffer (require("nvchad.tabufline").tabuflinePrev()) - Config A
<Leader>x: Close buffer (require("nvchad.tabufline").close_buffer()) - Config A
Comment Mappings
Normal Mode (n):
<Leader>/: Toggle comment (require("Comment.api").toggle.linewise.current()) - Config A
Visual Mode (v):
<Leader>/: Toggle comment (require('Comment.api').toggle.linewise(vim.fn.visualmode())) - Config A
LSP Mappings
Normal Mode (n):
gD: LSP declaration (vim.lsp.buf.declaration()) - Config A
gd: LSP definition (vim.lsp.buf.definition()) - Config A
K: LSP hover (vim.lsp.buf.hover()) - Config A
gi: LSP implementation (vim.lsp.buf.implementation()) - Config A
<Leader>ls: LSP signature help (vim.lsp.buf.signature_help()) - Config A
<Leader>D: LSP definition type (vim.lsp.buf.type_definition()) - Config A
<Leader>ra: LSP rename (require("nvchad.renamer").open()) - Config A (noted as redundant in past conversations but retained)
<Leader>rn: LSP rename (Lspsaga rename) - Config C (alternative to <Leader>ra)
<Leader>ca: LSP code action (vim.lsp.buf.code_action()) - Config A
gr: LSP references (vim.lsp.buf.references()) - Config A
<Leader>lf: Floating diagnostic (vim.diagnostic.open_float { border = "rounded" }) - Config A
[d: Goto prev diagnostic (vim.diagnostic.goto_prev { float = { border = "rounded" } }) - Config A
]d: Goto next diagnostic (vim.diagnostic.goto_next { float = { border = "rounded" } }) - Config A
<Leader>q: Diagnostic setloclist (vim.diagnostic.setloclist()) - Config A
<Leader>wa: Add workspace folder (vim.lsp.buf.add_workspace_folder()) - Config A
<Leader>wr: Remove workspace folder (vim.lsp.buf.remove_workspace_folder()) - Config A
<Leader>wl: List workspace folders (print(vim.inspect(vim.lsp.buf.list_workspace_folders()))) - Config A
<Leader>ds: LSP diagnostic loclist (vim.diagnostic.setloclist()) - Config B
Visual Mode (v):
<Leader>ca: LSP code action (vim.lsp.buf.code_action()) - Config A
NvimTree Mappings
Normal Mode (n):
<C-n>: Toggle NvimTree (:NvimTreeToggle<CR>) - Config A
<Leader>e: Focus NvimTree (:NvimTreeFocus<CR>) - Config A
<Leader>E: Reveal file in NvimTree (:NvimTreeFindFile) - Config B
Telescope Mappings
Normal Mode (n):
<Leader>ff: Find files (:Telescope find_files<CR>) - Config A
<Leader>fa: Find all (:Telescope find_files follow=true no_ignore=true hidden=true<CR>) - Config A
<Leader>fw: Live grep (:Telescope live_grep<CR>) - Config A
<Leader>fb: Find buffers (:Telescope buffers<CR>) - Config A, Config B
<Leader>fh: Help page (:Telescope help_tags<CR>) - Config A, Config B
<Leader>fo: Find oldfiles (:Telescope oldfiles<CR>) - Config A, Config B
<Leader>fz: Find in current buffer (:Telescope current_buffer_fuzzy_find<CR>) - Config A
<Leader>cm: Git commits (:Telescope git_commits<CR>) - Config A
<Leader>gt: Git status (:Telescope git_status<CR>) - Config A
<Leader>pt: Pick hidden term (:Telescope terms<CR>) - Config A
<Leader>th: NvChad themes (:Telescope themes<CR>) - Config A
<Leader>ma: Telescope bookmarks (:Telescope marks<CR>) - Config A
<Leader>fp: Find projects (:Telescope projects<CR>) - Config B, added to Config A
<Leader>fr: Resume last Telescope (:Telescope resume<CR>) - Config B, added to Config A
<Leader>pp: Projects (:Telescope projects<CR>) - Config B
Nvterm Mappings
Terminal Mode (t):
<A-i>: Toggle floating term (require("nvterm.terminal").toggle "float") - Config A
<A-h>: Toggle horizontal term (require("nvterm.terminal").toggle "horizontal") - Config A
<A-v>: Toggle vertical term (require("nvterm.terminal").toggle "vertical") - Config A
Normal Mode (n):
<A-i>: Toggle floating term (require("nvterm.terminal").toggle "float") - Config A
<A-h>: Toggle horizontal term (require("nvterm.terminal").toggle "horizontal") - Config A
<A-v>: Toggle vertical term (require("nvterm.terminal").toggle "vertical") - Config A
<Leader>h: New horizontal term (require("nvterm.terminal").new "horizontal") - Config A
<Leader>v: New vertical term (require("nvterm.terminal").new "vertical") - Config A
WhichKey Mappings
Normal Mode (n):
<Leader>wK: Which-key all keymaps (:WhichKey) - Config A
<Leader>wk: Which-key query lookup (:WhichKey <input>) - Config A
Indent Blankline Mappings
Normal Mode (n):
<Leader>cc: Jump to current context (require("indent_blankline.utils").get_current_context) - Config A
Git Mappings
Normal Mode (n):
]c: Jump to next hunk (require("gitsigns").next_hunk()) - Config A
[c: Jump to prev hunk (require("gitsigns").prev_hunk()) - Config A
<Leader>rh: Reset hunk (require("gitsigns").reset_hunk()) - Config A
<Leader>ph: Preview hunk (require("gitsigns").preview_hunk()) - Config A
<Leader>gb: Blame line (require("gitsigns").blame_line()) - Config A
<Leader>td: Toggle deleted (require("gitsigns").toggle_deleted()) - Config A
<Leader>gs: Stage hunk (require("gitsigns").stage_hunk()) - Config C, added to Config A
<Leader>gu: Unstage hunk (require("gitsigns").undo_stage_hunk()) - Planned, added to Config A
<Leader>grb: Reset buffer (require("gitsigns").reset_buffer()) - Planned, added to Config A
<Leader>gd: Git diff (require("gitsigns").diffthis()) - Config C, added to Config A
<Leader>gc: Git commit (:Git commit<CR>) - Config C, added to Config A
DAP (Debugging) Mappings
Normal Mode (n):
<Leader>dt: Toggle breakpoint (require("dap").toggle_breakpoint()) - Config C, added to Config A
<Leader>dc: Continue (require("dap").continue()) - Config C, added to Config A
<Leader>ds: Step over (require("dap").step_over()) - Config B, added to Config A
<Leader>di: Step into (require("dap").step_into()) - Config B, added to Config A
<Leader>do: Step out (require("dap").step_out()) - Config B, added to Config A
<Leader>dO: Step out (require("dap").step_out()) - Config C (same as <Leader>do)
Jupyter/Magma Mappings
Normal Mode (n):
<Leader>jm: Magma evaluate (:MagmaEvaluateOperator<CR>) - Config B, added to Config A (Pro mode)
<Leader>jc: Jupyter connect (:MagmaInit python3) - Config B
Visual Mode (v):
<Leader>jm: Magma evaluate visual (:<C-u>MagmaEvaluateVisual<CR>) - Config B, added to Config A (Pro mode)
Neotest Mappings
Normal Mode (n):
<Leader>tt: Run tests (:Neotest run) - Config B
<Leader>tf: Run file (:Neotest run file) - Config B
<Leader>ts: Test summary (:Neotest summary) - Config B
